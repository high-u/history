<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on history</title>
    <link>https://history.high-u.cf/posts/</link>
    <description>Recent content in Posts on history</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Mar 2021 20:16:00 +0900</lastBuildDate><atom:link href="https://history.high-u.cf/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GraphQL Server のデータソースを配列からデータベースに変更しただけ</title>
      <link>https://history.high-u.cf/posts/2021-03-30-change-graphql-server-data-source/</link>
      <pubDate>Tue, 30 Mar 2021 20:16:00 +0900</pubDate>
      
      <guid>https://history.high-u.cf/posts/2021-03-30-change-graphql-server-data-source/</guid>
      <description>構築する node -v # v14.16.0 echo &amp;#34;{}&amp;#34; &amp;gt; package.json npm i express express-graphql @graphql-tools/schema better-sqlite3 ./server.js
&amp;#34;use strict&amp;#34; const express = require(&amp;#34;express&amp;#34;) const { graphqlHTTP } = require(&amp;#34;express-graphql&amp;#34;) const { makeExecutableSchema } = require(&amp;#34;@graphql-tools/schema&amp;#34;) const DataLoader = require(&amp;#34;dataloader&amp;#34;) const db = require(&amp;#34;better-sqlite3&amp;#34;)(&amp;#34;foobar.db&amp;#34;); (() =&amp;gt; { db.exec(&amp;#34;drop table if exists post&amp;#34;) db.exec(` create table if not exists post ( id text primary key, title text, author text ) `) db.exec(&amp;#34;drop table if exists tag&amp;#34;) db.</description>
    </item>
    
    <item>
      <title>GraphQL Server に Dataloader をいれてみた</title>
      <link>https://history.high-u.cf/posts/2021-03-29-graphql-server-for-nodejs-with-dataloader/</link>
      <pubDate>Mon, 29 Mar 2021 19:54:00 +0900</pubDate>
      
      <guid>https://history.high-u.cf/posts/2021-03-29-graphql-server-for-nodejs-with-dataloader/</guid>
      <description>Dataloader 導入前との比較 Node.js (express 使用) で GraphQL Server を書いてみた | history をベースに Dataloader を導入した。
データの持ち方を、tag に配列を使った形から、通常の RDBMS でありそうな感じに変更した。
四苦八苦したが、 Building a GraphQL API in JavaScript | Heroku がすごく参考になった。
構築する node -v # v14.16.0 echo &amp;#34;{}&amp;#34; &amp;gt; package.json npm i express express-graphql @graphql-tools/schema dataloader ./server.js
&amp;#34;use strict&amp;#34; const express = require(&amp;#34;express&amp;#34;) const { graphqlHTTP } = require(&amp;#34;express-graphql&amp;#34;) const { makeExecutableSchema } = require(&amp;#34;@graphql-tools/schema&amp;#34;) const DataLoader = require(&amp;#39;dataloader&amp;#39;) const postTable = [ { id: &amp;#34;p1&amp;#34;, title: &amp;#34;Getting started with Node.</description>
    </item>
    
    <item>
      <title>Node.js (express 使用) で GraphQL Server を書いてみた</title>
      <link>https://history.high-u.cf/posts/2021-03-28-graphql-for-nodejs/</link>
      <pubDate>Sun, 28 Mar 2021 12:34:00 +0900</pubDate>
      
      <guid>https://history.high-u.cf/posts/2021-03-28-graphql-for-nodejs/</guid>
      <description>構築する node -v # v14.16.0 echo &amp;#34;{}&amp;#34; &amp;gt; package.json npm i express express-graphql @graphql-tools/schema ./server.js
&amp;#34;use strict&amp;#34; const express = require(&amp;#34;express&amp;#34;) const { graphqlHTTP } = require(&amp;#34;express-graphql&amp;#34;) const { makeExecutableSchema } = require(&amp;#34;@graphql-tools/schema&amp;#34;) const posts = [ { id: &amp;#34;p1&amp;#34;, title: &amp;#34;Getting started with Node.js&amp;#34;, author: &amp;#34;Smith&amp;#34;, tags: [&amp;#34;t1&amp;#34;] }, { id: &amp;#34;p2&amp;#34;, title: &amp;#34;Getting started with GraphQL&amp;#34;, author: &amp;#34;Smith&amp;#34;, tags: [&amp;#34;t1&amp;#34;, &amp;#34;t2&amp;#34;] }, { id: &amp;#34;p3&amp;#34;, title: &amp;#34;Getting started with GraphQL Client&amp;#34;, author: &amp;#34;Joe&amp;#34;, tags: [&amp;#34;t1&amp;#34;, &amp;#34;t2&amp;#34;, &amp;#34;t3&amp;#34;] } ] const tags = [ { id: &amp;#34;t1&amp;#34;, name: &amp;#34;nodejs&amp;#34; }, { id: &amp;#34;t2&amp;#34;, name: &amp;#34;graphql&amp;#34; }, { id: &amp;#34;t3&amp;#34;, name: &amp;#34;react&amp;#34; } ] const schema = makeExecutableSchema({ typeDefs: /* GraphQL */ ` type Post { id: ID title: String author: String tags: [Tag] } type Tag { id: ID name: String } type Query { posts(author: String): [Post] } `, resolvers: { Query: { posts: (_, args) =&amp;gt; { console.</description>
    </item>
    
    <item>
      <title>Appsmith 起動した</title>
      <link>https://history.high-u.cf/posts/2021-03-24-appsmith/</link>
      <pubDate>Wed, 24 Mar 2021 09:42:00 +0900</pubDate>
      
      <guid>https://history.high-u.cf/posts/2021-03-24-appsmith/</guid>
      <description>公式ドキュメント見て Mac にインストール ここ 見て、Mac 上で実行したがダメだった。
しかし、スクリプトで作成された docker-compose.yml を up したら動いた（とりあえず立ち上がったまでの確認だけど）。 ポートだけ書き換えた。
docker-compose.yml の一部抜粋
version: &amp;#34;3.7&amp;#34; services: nginx: image: index.docker.io/appsmith/appsmith-editor env_file: ./docker.env ports: - - &amp;#34;080:80&amp;#34; + - &amp;#34;8080:80&amp;#34; - - &amp;#34;443:443&amp;#34; + - &amp;#34;8443:443&amp;#34;  volumes: - ./data/nginx/app.conf.template:/nginx.conf.template - ./data/certbot/conf:/etc/letsencrypt - ./data/certbot/www:/var/www/certbot command: &amp;#34;/bin/sh -c &amp;#39;while :; do sleep 6h &amp;amp; wait $${!}; nginx -s reload; done &amp;amp; /start-nginx.sh&amp;#39;&amp;#34; depends_on: - appsmith-internal-server labels: com.centurylinklabs.watchtower.enable: &amp;#34;true&amp;#34; networks: - appsmith docker-compose で動いた時の構成 docker-compose.</description>
    </item>
    
    <item>
      <title>PostgREST 弄ってみた</title>
      <link>https://history.high-u.cf/posts/2021-03-23-postgrest/</link>
      <pubDate>Wed, 24 Mar 2021 00:49:00 +0900</pubDate>
      
      <guid>https://history.high-u.cf/posts/2021-03-23-postgrest/</guid>
      <description>PostgREST 弄ってみた 起動と停止 docker-compose up -d docker-compose down --volumes --remove-orphans ファイル ./.env
POSTGRES_USER=postgres POSTGRES_PASSWORD=postgres POSTGRES_DB=postgres DB_ANON_ROLE=anon #DB_ANON_ROLE=postgres DB_SCHEMA=public docker-compose.yaml
version: &amp;#34;3&amp;#34; services: postgres: container_name: postgres user: &amp;#34;root:root&amp;#34; image: postgres:11-alpine ports: - &amp;#34;5432:5432&amp;#34; environment: - POSTGRES_USER=${POSTGRES_USER} - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} - POSTGRES_DB=${POSTGRES_DB} - DB_ANON_ROLE=${DB_ANON_ROLE} - DB_SCHEMA=${DB_SCHEMA} volumes: - ./initdb:/docker-entrypoint-initdb.d networks: - postgrest-backend restart: always postgrest: container_name: postgrest image: postgrest/postgrest:latest ports: - &amp;#34;3000:3000&amp;#34; environment: - PGRST_DB_URI=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB} - PGRST_DB_SCHEMA=${DB_SCHEMA} - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE} networks: - postgrest-backend restart: always networks: postgrest-backend: driver: bridge .</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://history.high-u.cf/posts/hello-world/</link>
      <pubDate>Sat, 20 Mar 2021 19:04:16 +0900</pubDate>
      
      <guid>https://history.high-u.cf/posts/hello-world/</guid>
      <description>Hello World このブログを作った時のメモ  xxx yyy zzz  </description>
    </item>
    
  </channel>
</rss>
